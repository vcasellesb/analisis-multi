x <- 1:9; names(x) <- x
x
# Multiplication & Power Tables
x %o% x
bivden<-function(x, y, ngridx = 30, ngridy = 30, constant.x = 1, constant.y = 1) {
#x and y are vectors containing the bivariate data
#ngridx and ngridy are the number of points in the grid
#
mx <- mean(x)
sdx <- sqrt(var(x))
my <- mean(y)
sdy <- sqrt(var(y))
#scale x and y before estimation
x <- scale(x)
y <- scale(y)
#
den <- matrix(0, ngridx, ngridy)
#
#find possible value for bandwidth
#
n <- length(x)
#
hx <- constant.x * n^(-0.2)
hy <- constant.y * n^(-0.2)
h <- hx * hy
hsqrt <- sqrt(h)
#
seqx <- seq(range(x)[1], range(x)[2], length = ngridx)
seqy <- seq(range(y)[1], range(y)[2], length = ngridy)
#
for(i in 1:n) {
X <- x[i]
Y <- y[i]
xx <- (seqx - X)/hsqrt
yy <- (seqy - Y)/hsqrt
den <- den + outer(xx, yy, function(x, y)
exp(-0.5 * (x^2 + y^2)))
}
den <- den/(n * 2 * pi * h)
seqx <- sdx * seqx + mx
seqy <- sdy * seqy + my
result <- list(seqx = seqx, seqy = seqy, den = den)
result
}
y <- 2:8; names(y) <- paste(y,":", sep = "")
y
x
outer(y, x, `^`)
## three way multiplication table:
x %o% x %o% y[1:3]
x %o% x
x %o% x %o% y
1 * length(x) ^ (-0.2)
seqx <- seq(range(x)[1], range(x)[2])
seq
seqx <- seq(range(x)[1], range(x)[2], length=1)
seqx
range(x)
x
y
mx <- mean(x)
sdx <- sqrt(var(x))
my <- mean(y)
sdy <- sqrt(var(y))
x <- scale(x)
x
y <- scale(y)
ngridx <- 30
ngridy <- 30
den <- matrix(0, ngridx, ngridy)
View(den)
n <- length(x)
y <- 2:10; names(y) <- paste(y,":", sep = "")
mx <- mean(x)
sdx <- sqrt(var(x))
my <- mean(y)
sdy <- sqrt(var(y))
x <- scale(x)
y <- scale(y)
ngridx <- 30
ngridy <- 30
den <- matrix(0, ngridx, ngridy)
n <- length(x)
hx <- 1 * n^(-0.2)
hy <- 1 * n^(-0.2)
h <- hx*hy
h
hsqrt <- sqrt(h)
seqx <- seq(range(x)[1], range(x)[2], length = ngridx)
seqy <- seq(range(y)[1], range(y)[2], length = ngridy)
seqx
seqy
X <- x[1]
X
Y <- y[1]
Y
xx <- (seqx - X)/hsqrt
xx
yy <- (seqy - Y)/hsqrt
yy
den <- den + outer(xx, yy, function(x, y)
exp(-0.5 * (x^2 + y^2)))
den
xx
yy
bivden<-function(x, y, ngridx = 30, ngridy = 30, constant.x = 1, constant.y = 1) {
#x and y are vectors containing the bivariate data
#ngridx and ngridy are the number of points in the grid
#
mx <- mean(x)
sdx <- sqrt(var(x))
my <- mean(y)
sdy <- sqrt(var(y))
#scale x and y before estimation
x <- scale(x)
y <- scale(y)
#
den <- matrix(0, ngridx, ngridy)
#
#find possible value for bandwidth
#
n <- length(x)
#
hx <- constant.x * n^(-0.2)
hy <- constant.y * n^(-0.2)
h <- hx * hy
hsqrt <- sqrt(h)
#
seqx <- seq(range(x)[1], range(x)[2], length = ngridx)
seqy <- seq(range(y)[1], range(y)[2], length = ngridy)
#
for(i in 1:n) {
X <- x[i]
Y <- y[i]
xx <- (seqx - X)/hsqrt
yy <- (seqy - Y)/hsqrt
den <- den + outer(xx, yy, function(x, y)
exp(-0.5 * (x^2 + y^2)))
}
den <- den/(n * 2 * pi * h)
seqx <- sdx * seqx + mx
seqy <- sdy * seqy + my
result <- list(seqx = seqx, seqy = seqy, den = den)
result
}
bivden(x, y)
plot(bivden(x, y)$den)
hx
hy
n ^ (-0.2)
n ^ (-0.2) ** 2
n ^ (-0.2)
0.644394 ** 2
density(x)
x
xx
yy
outer(xx, yy, function(x,y) exp(-0.5*(x**2 + y**2)))
exp(-0.5 * (0 + 0))
pi
pi
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx_vec)
for (i in 1:n){
X <- x[i]
xx <- (seqx-X)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*h)
result <- list(seqx = seqx_vec, den=den)
result
}
univarden(x)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
xx <- (seqx-X)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*h)
result <- list(seqx = seqx_vec, den=den)
result
}
univarden(x)
x <- 1:9; names(x) <- x
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
xx <- (seqx-X)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*h)
result <- list(seqx = seqx_vec, den=den)
result
}
univarden(x)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
xx <- (seqx_vec-X)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*h)
result <- list(seqx = seqx_vec, den=den)
result
}
univarden(x)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, length=seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
xx <- (seqx_vec-X)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*h)
result <- list(seqx = seqx_vec, den=den)
result
}
univarden(x)
plot(univarden(x)$seqx, univarden(x)$den)
?contour
plot(univarden(x)$seqx, univarden(x)$den)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, length=seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
xx <- (X-seqx_vec)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*h)
result <- list(seqx = seqx_vec, den=den)
result
}
plot(univarden(x)$seqx, univarden(x)$den)
R.version
"airpoll" <-
structure(.Data = list("Rainfall" = c(36., 35., 44., 47., 43., 53., 43., 45., 36., 36., 52., 33., 40., 35., 37., 35., 36., 15., 31., 30., 31., 31.,
42., 43., 46., 39., 35., 43., 11., 30., 50., 60., 30., 25., 45., 46., 54., 42., 42., 36., 37., 42., 41.,
44., 32., 34., 10., 18., 13., 35., 45., 38., 31., 40., 41., 28., 45., 45., 42., 38.)
, "Education" = c(11.4, 11., 9.8000000000000007, 11.1, 9.5999999999999996, 10.199999999999999, 12.1, 10.6, 10.5, 10.699999999999999,
9.5999999999999996, 10.9, 10.199999999999999, 11.1, 11.9, 11.800000000000001, 11.4, 12.199999999999999,
10.800000000000001, 10.800000000000001, 11.4, 10.9, 10.4, 11.5, 11.4, 11.4, 12., 9.5, 12.1,
9.9000000000000004, 10.4, 11.5, 11.1, 12.1, 10.1, 11.300000000000001, 9.6999999999999993,
10.699999999999999, 10.5, 10.6, 12., 10.1, 9.5999999999999996, 11., 11.1, 9.6999999999999993, 12.1,
12.199999999999999, 12.199999999999999, 12.199999999999999, 11.1, 11.4, 10.699999999999999,
10.300000000000001, 12.300000000000001, 12.1, 11.300000000000001, 11.1, 9., 10.699999999999999)
, "Popden" = c(3243., 4281., 4260., 3125., 6441., 3325., 4679., 2140., 6582., 4213., 2302., 6122., 4101., 3042., 4259., 1441.,
4029., 4824., 4834., 3694., 1844., 3226., 2269., 2909., 2647., 4412., 3262., 3214., 4700., 4474., 3497.,
4657., 2934., 2095., 2082., 3327., 3172., 7462., 6092., 3437., 3387., 3508., 4843., 3768., 4355., 5160.,
3033., 4253., 2702., 3626., 1883., 4923., 3249., 1671., 5308., 3665., 3152., 3678., 9699., 3451.)
, "Nonwhite" = c(8.8000000000000007, 3.5, 0.80000000000000004, 27.100000000000001, 24.399999999999999, 38.5, 3.5,
5.2999999999999998, 8.0999999999999996, 6.7000000000000002, 22.199999999999999, 16.300000000000001, 13.,
14.699999999999999, 13.1, 14.800000000000001, 12.4, 4.7000000000000002, 15.800000000000001, 13.1, 11.5,
5.0999999999999996, 22.699999999999999, 7.2000000000000002, 21., 15.6, 12.6, 2.8999999999999999,
7.7999999999999998, 13.1, 36.700000000000003, 13.5, 5.7999999999999998, 2., 21., 8.8000000000000007,
31.399999999999999, 11.300000000000001, 17.5, 8.0999999999999996, 3.6000000000000001, 2.2000000000000002,
2.7000000000000002, 28.600000000000001, 5., 17.199999999999999, 5.9000000000000004, 13.699999999999999,
3., 5.7000000000000002, 3.3999999999999999, 3.7999999999999998, 9.5, 2.5, 25.899999999999999, 7.5, 12.1,
1., 4.7999999999999998, 11.699999999999999)
, "NOX" = c(15., 10., 6., 8., 38., 32., 32., 4., 12., 7., 8., 63., 26., 21., 9., 1., 4., 8., 35., 4., 1., 3., 3., 3., 5.,
7., 4., 7., 319., 37., 18., 1., 23., 11., 14., 3., 17., 26., 32., 59., 21., 4., 11., 9., 4., 15., 66.,
171., 32., 7., 4., 5., 7., 2., 28., 2., 11., 3., 8., 13.)
, "SO2" = c(59., 39., 33., 24., 206., 72., 62., 4., 37., 20., 27., 278., 146., 64., 15., 1., 16., 28., 124., 11., 1., 10.,
5., 10., 1., 33., 4., 32., 130., 193., 34., 1., 125., 26., 78., 8., 1., 108., 161., 263., 44., 18., 89.,
48., 18., 68., 20., 86., 3., 20., 20., 25., 25., 11., 102., 1., 42., 8., 49., 39.)
, "Mortality" = c(921.89999999999998, 997.89999999999998, 962.39999999999998, 982.29999999999995, 1071., 1030., 934.70000000000005,
899.5, 1002., 912.29999999999995, 1018., 1025., 970.5, 986., 958.79999999999995, 860.10000000000002,
936.20000000000005, 871.79999999999995, 959.20000000000005, 941.20000000000005, 891.70000000000005,
871.29999999999995, 971.10000000000002, 887.5, 952.5, 968.70000000000005, 919.70000000000005,
844.10000000000002, 861.79999999999995, 989.29999999999995, 1006., 861.39999999999998, 929.20000000000005,
857.60000000000002, 961., 923.20000000000005, 1113., 994.60000000000002, 1015., 991.29999999999995, 894.,
938.5, 946.20000000000005, 1026., 874.29999999999995, 953.60000000000002, 839.70000000000005,
911.70000000000005, 790.70000000000005, 899.29999999999995, 904.20000000000005, 950.70000000000005, 972.5,
912.20000000000005, 968.79999999999995, 823.79999999999995, 1004., 895.70000000000005, 911.79999999999995,
954.39999999999998)
)
, names = c("Rainfall", "Education", "Popden", "Nonwhite", "NOX", "SO2", "Mortality")
, class = "data.frame"
, row.names = c("akronOH", "albanyNY", "allenPA", "atlantGA", "baltimMD", "birmhmAL", "bostonMA", "bridgeCT", "bufaloNY",
"cantonOH", "chatagTN", "chicagIL", "cinnciOH", "clevelOH", "colombOH", "dallasTX", "daytonOH", "denverCO",
"detrotMI", "flintMI", "ftwortTX", "grndraMI", "grnborNC", "hartfdCT", "houstnTX", "indianIN", "kansasMO",
"lancasPA", "losangCA", "louisvKY", "memphsTN", "miamiFL", "milwauWI", "minnplMN", "nashvlTN", "newhvnCT",
"neworlLA", "newyrkNY", "philadPA", "pittsbPA", "portldOR", "provdcRI", "readngPA", "richmdVA", "rochtrNY",
"stlousMO", "sandigCA", "sanfrnCA", "sanjosCA", "seatleWA", "springMA", "syracuNY", "toledoOH", "uticaNY",
"washDC", "wichtaKS", "wilmtnDE", "worctrMA", "yorkPA", "youngsOH")
)
airpoll
source('biv.R')
uni <- univarden(x = airpoll$)
uni <- univarden(x = airpoll$Mortality)
uni$den
plot(uni$seqx, uni$den, type='l')
density(airpoll$Mortality)
plot(density(airpoll$Mortality))
density(airpoll$Mortality)
plot(uni$seqx, uni$den, type='l')
?density
plot(uni$seqx, uni$den, type='l')
plot(density(airpoll$Mortality))
4*10^-3
uni$den
max(uni$den)
density(airpoll$Mortality)
max(uni$den)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, length=seqx)
h <- 1.06 * sdx * n^(-1/5) # from Węglarczyk 2018
hsqrt <- sqrt(h)
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
# it's the same seqx_vec - X or the other way
xx <- (X-seqx_vec)/hsqrt
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*2*pi*hsqrt)
result <- list(seqx = seqx_vec, den=den)
result
}
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
plot(uni$seqx, uni$den, type='l')
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
plot(uni$seqx, uni$den, type='l')
max(uni$den)
density(airpoll$Mortality, kernel="gaussian")
source('biv.R')
plot(uni$seqx, uni$den, type='l')
?density
bivden(x=airpoll$Mortality)
bivden(x=airpoll$Mortality, y=airpoll$Mortality)
max(bivden(x=airpoll$Mortality, y=airpoll$Mortality)$den)
sum(bivden(x=airpoll$Mortality, y=airpoll$Mortality)$den)
uni$den
sum(uni$den)
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
plot(uni$seqx, uni$den, type='l')
sum(uni$den)
sum(uni$den) / 50
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
plot(uni$seqx, uni$den, type='l')
max(uni$den)
max(density(airpoll$Mortality))
max(density(airpoll$Mortality)$y)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, length=seqx)
h <- 1 * n^(-0.2) # from Węglarczyk 2018
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
# it's the same seqx_vec - X or the other way
xx <- (X-seqx_vec)/h
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*sqrt(2*pi)*h)
result <- list(seqx = seqx_vec, den=den)
result
}
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
max(uni$den)
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
max(uni$den)
univarden <- function(x, seqx=50, constant.x=1){
# we get what we need, i.e. mean, sd, bandwith(h)
mx <- mean(x)
sdx <- sqrt(var(x))
n <- length(x)
range1 = range(x)[1]; range2 = range(x)[2]
# values of x we will estimate den for
seqx_vec <- seq(range1, range2, length=seqx)
h <- 0.79 * IQR(x) * n^(-0.2) # from Węglarczyk 2018
den <- numeric(length=seqx)
for (i in 1:n){
X <- x[i]
# it's the same seqx_vec - X or the other way
xx <- (X-seqx_vec)/h
den <- den + exp(-0.5 * (xx^2))
}
den <- den/(n*sqrt(2*pi)*h)
result <- list(seqx = seqx_vec, den=den)
result
}
source('biv.R')
uni <- univarden(x = airpoll$Mortality)
max(uni$den)
sum(uni$den)
sum(density(airpoll$Mortality)$y)
length(density(airpoll$Mortality)$y)
uni <- univarden(x = airpoll$Mortality, seqx = 512)
sum(uni$den)
length(density(airpoll$Mortality, n = 50)$y)
sum(density(airpoll$Mortality, n = 50)$y)
sum(density(airpoll$Mortality, n = 512)$y)
remove(list=ls())
source('airpoll.R')
View(airpoll)
data(crabs, package="MASS")
crabs
str(crabs)
summary(crabs)
summary(crabs)[3:]
summary(crabs)[3:0]
summary(crabs)[3]
class(summary(crabs))
summary(crabs)[1,]
summary(crabs)[,3]
summary(crabs)[,4]
summary(crabs)[,4:10]
summary(crabs)[,4:9]
summary(crabs)[,4:5]
summary(crabs)[,4:7]
summary(crabs)[,4:8]
summary(crabs)[,4:9]
summary(crabs)[,4:8]
plot(univarden(crabs$RW))
plot(univarden(crabs$RW)$seqx, univarden(crabs$RW)$den)
plot(univarden(crabs$RW)$seqx, univarden(crabs$RW)$den, type="l")
